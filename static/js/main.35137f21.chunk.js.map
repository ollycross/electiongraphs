{"version":3,"sources":["Components/Line.jsx","Components/Pie.jsx","Components/BarPerc.jsx","Components/YearPicker.jsx","App.js","reportWebVitals.js","index.js","config.js"],"names":["Line","lineData","data","map","metric","id","row","x","election","y","total_votes","non_voters","toFixed","mapData","enableSlices","margin","top","right","bottom","left","xScale","type","yScale","colors","parties","find","key","color","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","yearCache","Pie","year","Object","entries","forEach","value","wantedKey","push","pieData","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","borderColor","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","defs","background","size","padding","stagger","rotation","lineWidth","spacing","fill","match","itemTextColor","BarPerc","yearData","party","share","barData","maxValue","keys","indexBy","valueScale","indexScale","round","indexValue","colorBy","axisTop","axisRight","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","YearPicker","years","setYear","indexOf","max","length","display","disabled","onClick","min","onChange","event","target","App","processed","reduce","output","ix","findIndex","outRow","runningTurnout","i","input","turnout","parseInt","parseFloat","electorate","Math","floor","useState","className","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.35137f21.chunk.js","sourcesContent":["import React from 'react';\nimport {parties} from '../config'\nimport {ResponsiveLine} from \"@nivo/line\";\n\nconst Line = ({data}) => {\n\n    const mapData = (data) => {\n        return ['con_votes', 'lab_votes', 'lib_votes', 'oth_votes', 'non_voters'].map(metric =>\n            ({\n                id: metric,\n                data: data.map(row => {\n                    return {\n                        x: row.election,\n                        y: ((row.data[metric] / (row.data.total_votes + row.data.non_voters)) * 100).toFixed(2)\n                    }\n                })\n            })\n        );\n    }\n\n    const lineData = mapData(data);\n\n\n    return <ResponsiveLine\n        data={lineData}\n        enableSlices={'x'}\n        margin={{top: 50, right: 110, bottom: 50, left: 60}}\n        xScale={{type: 'point'}}\n        yScale={{type: 'linear'}}\n        colors={({id}) => parties.find(({key}) => key === id).color}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Year',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Vote share',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ],\n            }\n        ]}\n    />\n}\n\nexport default Line;","import {ResponsivePie} from \"@nivo/pie\";\nimport {parties} from '../config';\n\nconst yearCache = {};\n\nconst Pie = ({data, year}) => {\n    if (!yearCache[year]) {\n        yearCache[year] = []\n        Object.entries(data.find(row => year === row.election).data).forEach(([key, value]) => {\n            if (parties.map(({key}) => key).find(wantedKey => wantedKey === key)) {\n                yearCache[year].push({\n                    id: key,\n                    value,\n                })\n            }\n        });\n    }\n    const pieData = yearCache[year];\n\n    return <ResponsivePie\n        data={pieData}\n        margin={{top: 40, right: 80, bottom: 80, left: 80}}\n        innerRadius={0.5}\n        padAngle={0.7}\n        cornerRadius={3}\n        activeOuterRadiusOffset={8}\n        borderWidth={1}\n        borderColor={{from: 'color', modifiers: [['darker', 0.2]]}}\n        arcLinkLabelsSkipAngle={10}\n        arcLinkLabelsTextColor=\"#333333\"\n        arcLinkLabelsThickness={2}\n        arcLinkLabelsColor={{from: 'color'}}\n        arcLabelsSkipAngle={10}\n        arcLabelsTextColor={{from: 'color', modifiers: [['darker', 2]]}}\n        colors={({id}) => parties.find(({key}) => key === id).color}\n\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: 'rgba(255, 255, 255, 0.3)',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: 'rgba(255, 255, 255, 0.3)',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        fill={[\n            {\n                match: {\n                    id: 'ruby'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'c'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'go'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'python'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'scala'\n                },\n                id: 'lines'\n            },\n            {\n                match: {\n                    id: 'lisp'\n                },\n                id: 'lines'\n            },\n            {\n                match: {\n                    id: 'elixir'\n                },\n                id: 'lines'\n            },\n            {\n                match: {\n                    id: 'javascript'\n                },\n                id: 'lines'\n            }\n        ]}\n        legends={[\n            {\n                anchor: 'bottom',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 56,\n                itemsSpacing: 0,\n                itemWidth: 100,\n                itemHeight: 18,\n                itemTextColor: '#999',\n                itemDirection: 'left-to-right',\n                itemOpacity: 1,\n                symbolSize: 18,\n                symbolShape: 'circle',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000'\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n}\n\nexport default Pie;","import React from 'react';\nimport {ResponsiveBar} from \"@nivo/bar\";\nimport {parties} from '../config';\n\nconst BarPerc = ({data, year}) => {\n\n    const yearCache = {};\n\n    if (!yearCache[year]) {\n        const yearData = data.find(row => year === row.election);\n        yearCache[year] = parties.map(party => ({\n            party: party.key,\n            share: (yearData.data[party.key] / yearData.data.total_votes * 100).toFixed(2),\n        }));\n    }\n\n    const barData = yearCache[year];\n\n    return <ResponsiveBar\n        data={barData}\n        maxValue={60}\n        keys={['share']}\n        indexBy=\"party\"\n        margin={{top: 50, right: 130, bottom: 50, left: 60}}\n        padding={0.3}\n        valueScale={{type: 'linear'}}\n        indexScale={{type: 'band', round: true}}\n        colors={({indexValue}) => parties.find(({key}) => key === indexValue).color}\n        colorBy=\"index\"\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: '#38bcb2',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: '#eed312',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        borderColor={{from: 'color', modifiers: [['darker', 1.6]]}}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'party',\n            legendPosition: 'middle',\n            legendOffset: 32\n        }}\n        axisLeft={{\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'share',\n            legendPosition: 'middle',\n            legendOffset: -40,\n        }}\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{from: 'color', modifiers: [['darker', 1.6]]}}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n    />\n}\n\nexport default BarPerc;","import React from \"react\";\n\nconst YearPicker = ({years = [], year, setYear}) => {\n    const value = years.indexOf(year);\n    const max = years.length - 1\n\n    return (\n        <div>\n            <div style={{display: 'inline-flex'}}>\n                <button type=\"button\" disabled={value === 0} onClick={() => setYear(years[value - 1])}>-</button>\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={max}\n                    value={value}\n                    onChange={(event) => setYear(years[event.target.value])}\n                />\n                <button type=\"button\" disabled={value === max} onClick={() => setYear(years[value + 1])}>+</button>\n            </div>\n            <div>Year: {year}</div>\n        </div>\n    );\n}\n\nexport default YearPicker;","import React, {useState} from 'react';\nimport './App.css';\nimport data from './data/1918_2019election_results.json';\nimport Line from './Components/Line';\nimport Pie from './Components/Pie';\nimport BarPerc from './Components/BarPerc';\nimport YearPicker from \"./Components/YearPicker\";\n\nfunction App() {\n  const byKey = (key) => data.reduce((output, row) => {\n    let ix = output.findIndex((outRow) => outRow[key] === row[key]);\n    if (ix === -1) {\n      const value = {\n        [key]: row[key],\n        data: []\n      }\n\n      output.push(value);\n      ix = output.length - 1;\n    }\n\n    output[ix].data.push(row);\n\n    return output;\n  }, []);\n\n  const byElection = byKey('election');\n  const processed = byElection.map(({election, data}) => {\n    let runningTurnout = 0;\n    let i = 1;\n    return {\n      election,\n      data: data.reduce((output, input, ix) => {\n        if(input.turnout === 'NA') {\n          return output;\n        }\n        ['con_votes', 'lab_votes', 'lib_votes', 'oth_votes', 'total_votes'].forEach((key) => {\n          output[key] = (parseInt(output[key], 10) || 0) + (parseInt(input[key], 10) || 0);\n        });\n        runningTurnout += parseFloat(input.turnout) || 0;\n        output.turnout = (runningTurnout / i++);\n        output.electorate = Math.floor(output.total_votes / output.turnout);\n        output.non_voters =  output.electorate - output.total_votes;\n\n        return output;\n      }, {})\n    }\n  })\n\n  const years = processed.map(row => row.election);\n\n  const [year, setYear] = useState(years[years.length - 1]);\n\n  return (\n    <div className=\"App\">\n      <div style={{ height: '40vh'}}>\n        <Line data={processed} />\n      </div>\n      <div>\n        <YearPicker year={year} years={years} setYear={setYear} />\n      </div>\n      <div style={{height: '40vh', display: 'flex'}}>\n          <Pie style={{width: '50%'}} year={year} data={processed} />\n          <BarPerc style={{width: '50%'}} year={year} data={processed} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const parties = [\n        {\n            key: 'con_votes',\n            color: '#115da8'\n        },\n        {\n            key: 'lab_votes',\n            color: '#E4003B'\n        },\n        {\n            key: 'lib_votes',\n            color: '#FAA61A'\n        },\n        {\n            key: 'oth_votes',\n            color: '#6AB023'\n        },\n        {\n            key: 'non_voters',\n            color: '#666666'\n        },\n    ];\n\nmodule.exports = {\n    parties,\n\n}"],"sourceRoot":""}